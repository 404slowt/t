//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by FernFlower decompiler)
//

package pl.lordtricker.ltrynek.client.manager;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import net.fabricmc.api.EnvType;
import net.fabricmc.api.Environment;
import pl.lordtricker.ltrynek.client.config.PriceEntry;
import pl.lordtricker.ltrynek.client.util.CompositeKeyUtil;

@Environment(EnvType.CLIENT)
public class ClientPriceListManager {
    private static final Map<String, List<PriceEntry>> priceLists = new HashMap();
    private static final Map<String, Map<String, String>> customLookup = new HashMap();
    private static String activeProfile = "default";

    public static void setActiveProfile(String profile) {
        activeProfile = profile;
        priceLists.computeIfAbsent(profile, (k) -> new ArrayList());
        customLookup.computeIfAbsent(profile, (k) -> new HashMap());
    }

    public static String getActiveProfile() {
        return activeProfile;
    }

    public static String listProfiles() {
        return priceLists.isEmpty() ? "No profiles defined." : String.join(", ", priceLists.keySet());
    }

    public static void addPriceEntry(PriceEntry entry) {
        String compositeKey = CompositeKeyUtil.getCompositeKeyFromEntry(entry);
        List<PriceEntry> entries = (List)priceLists.computeIfAbsent(activeProfile, (k) -> new ArrayList());
        entries.removeIf((pe) -> {
            String keyFromEntry = CompositeKeyUtil.getCompositeKeyFromEntry(pe);
            return keyFromEntry.equals(compositeKey);
        });
        entries.add(entry);
    }

    public static void addPriceEntry(String rawItem, double maxPrice) {
        String compositeKey = CompositeKeyUtil.createCompositeKey(rawItem);
        String[] parts = compositeKey.split("\\|", -1);
        if (parts.length >= 3) {
            PriceEntry newEntry = new PriceEntry();
            newEntry.name = parts[0];
            newEntry.lore = parts[1];
            newEntry.material = parts[2];
            newEntry.enchants = parts.length > 3 ? parts[3] : "";
            newEntry.maxPrice = maxPrice;
            addPriceEntry(newEntry);
        }
    }

    public static void removePriceEntry(String rawItem) {
        String compositeKey = CompositeKeyUtil.createCompositeKey(rawItem);
        List<PriceEntry> entries = (List)priceLists.get(activeProfile);
        if (entries != null) {
            entries.removeIf((pe) -> {
                String var10000 = pe.name;
                String keyFromEntry = (var10000 + "|" + (pe.lore == null ? "" : pe.lore) + "|" + (pe.material == null ? "" : pe.material) + "|" + (pe.enchants == null ? "" : pe.enchants)).toLowerCase();
                return keyFromEntry.equals(compositeKey);
            });
        }

    }

    public static PriceEntry findMatchingPriceEntry(String noColorName, List<String> loreLines, String materialId, String enchantments) {
        List<PriceEntry> entries = (List)priceLists.get(activeProfile);
        if (entries == null) {
            return null;
        } else {
            Iterator var5 = entries.iterator();

            while(true) {
                PriceEntry pe;
                boolean foundLore;
                do {
                    while(true) {
                        if (!var5.hasNext()) {
                            return null;
                        }

                        pe = (PriceEntry)var5.next();
                        if (pe.material == null || pe.material.isEmpty() || materialId.equalsIgnoreCase(pe.material)) {
                            if (pe.name.isEmpty()) {
                                break;
                            }

                            String lowerName = noColorName.toLowerCase();
                            String lowerMaterial = materialId.toLowerCase();
                            String lowerEntryName = pe.name.toLowerCase();
                            if (lowerName.contains(lowerEntryName) || lowerMaterial.contains(lowerEntryName)) {
                                break;
                            }
                        }
                    }

                    if (pe.lore == null || pe.lore.isEmpty()) {
                        break;
                    }

                    foundLore = false;

                    for(String line : loreLines) {
                        if (line.toLowerCase().contains(pe.lore.toLowerCase())) {
                            foundLore = true;
                            break;
                        }
                    }
                } while(!foundLore);

                if (pe.enchants == null || pe.enchants.isEmpty() || enchantments != null && !enchantments.isEmpty() && enchantments.toLowerCase().contains(pe.enchants.toLowerCase())) {
                    return pe;
                }
            }
        }
    }

    public static Map<String, List<PriceEntry>> getAllProfiles() {
        return priceLists;
    }

    public static void clearAllProfiles() {
        priceLists.clear();
        customLookup.clear();
        activeProfile = "default";
    }
}
